[ { "title": "Creating a line chart with chartjs and React", "url": "/blog/posts/creating-line-chart-chart-js-react/", "categories": "React", "tags": "React", "date": "2022-09-19 00:00:00 +0000", "snippet": "Adding charts to your website might be useful and it will always look fancy and glamorous. This is a tutorial to create a line chart in your application using React and Chart.js. You can find the full project here.Our chart should look like this:Sections Installing Create React App Installing dependencies Folder structure Usage Adding files Main file InstallingCreate React AppFirst let’s create our simple react project so we can start working. Do the command below:npx create-react-app line-chartInstalling dependenciesReact chartjs 2 provides already built-in components for using it with React, making our life easier. Let’s install it along with chartjs with the following:npm install --save chart.js react-chartjs-2Folder structureNow we have everything that we need set up, let’s create some folders. First, create a components and data folder. Inside components, create a charts folder, this folder will have charts components for every chart type. Our data folder will contain some fake data to test our application. Our directory should look something like this: src |__components |__charts |__dataUsageAdding filesFirst, let’s create our components. Inside src/components/charts create a LineChart.js file and add:import React from 'react'import { Line } from 'react-chartjs-2';import { Chart as ChartJS } from 'chart.js/auto'const LineChart = ({ chartData }) =&gt; { return ( &lt;Line data={chartData} /&gt; )}export default LineChart;In the above we are receiving charData as props that will contain all the necessary info for our chart to be built. We’re also importing what we need to our Line chart. If we wanted to use a Bar chart, for example, we would simply change our { Line } import to { Bar }. The third import is used due to a bug where otherwise it will return a blank screenNow that we have our components for our chart, let’s create some dummy data to use in this tutorial. Inside our src/data, create a file with some fake data. In our case, we’re adding the following:export const citiesData = [ { id: 1, year: 2016, cars: 23000, bicycles: 3223, }, { id: 2, year: 2017, cars: 80000, bicycles: 11223, }, { id: 3, year: 2018, cars: 67000, bicycles: 5063, }, { id: 4, year: 2019, cars: 44500, bicycles: 22143, }, { id: 5, year: 2020, cars: 100000, bicycles: 33213, },]So we’re creating a line chart for displaying info about how many cars and bicycles there is. We’re creating an array of objects, each object will have an id, a year that will represent our X axis, cars and bicycles will be different lines inside our chart. You can add as many as you want and we’ll see how to display our data.Main fileNow that we’ve created our line chart component and we have some data to fill it in, let’s put everything together to see it working. In our App.js file, let’s first import the files that we just created. We will also use React’s useState hook:import React, { useState } from 'react';import LineChart from './components/charts/LineChart';import { UserData } from './data/fakeLine.js';Inside our function, let’s handle our data so we can send it to our chart component. Create a data constant with useState and add the the information. Our data object should have labels and datasets key, both being arrays with information: const [data, setData] = useState({ labels: UserData.map(data =&gt; data.year), datasets: [{ label: \"Cars\", data: UserData.map(data =&gt; data.cars), backgroundColor: ['red'] }, { label: \"Bicycles\", data: UserData.map(data =&gt; data.bicycles), backgroundColor: ['Blue'] }] });We’ll use javascript’s map method to loop through our fake data and get every year, then we’ll use them as our X axis labels to display our information.The datasets values will consist of objects, each object will be a different line in our chart. The label key will be our legends on the top of our graph. data will get each line’s value for corresponding year, in the first object we’ll use our data.cars. backgroundColor is to differentiate our dots color in our chart. We can see options available for the object here.So, that’s it for today. For other types of charts, you should look into the documentation to see what you have to change in your chart’s data and options.Full code here.That’s it for today. I hope you like it!" }, { "title": "Generating a static site with template shell script", "url": "/blog/posts/generating-static-site-shell-script/", "categories": "Shell", "tags": "Shell, Linux", "date": "2022-08-31 00:00:00 +0000", "snippet": "This is a tutorial to generate a static website using Bourne shell(sh) scripting and terminal arguments. You can find the full project here.In this project we’ll create a simple site to show a list of contacts that you can pass typing the arguments or concatenating a text file.PrerequisitesThis was created using Ubuntu 22.04, Sublime Text 3 and Firefox. You only need to know the very basics of shell commands and HTML/CSS.You can do everything through the terminal, but Sublime Text will make your life easier. You can find installation instructions for Sublime here. Firefox will be needed to visualize our .html file.ProjectOur final project will look like this:Sections Creating our shell file echo and read commands writing in index.html file Creating basic html variable dynamic site’s title creating CSS variable Using terminal arguments dynamic content from arguments iterating over arguments using text file content as arguments Creating our shell fileLet’s start by creating our main file who’s responsible for generating our html. Navigate to your directory and do the command below to create main.sh file.touch main.shAdd ‘#! /bin/sh’ to the first line as our script header.Echo and read commandsAs we’ll make this in a ‘user-friendly’ way, let’s use echo to show in the terminal a simple message asking the website’s name, then we’ll use the command read to get the input given through terminal and assign it to our created variable. Then we’ll use the echo again to confirm everything went fine.#! /bin/shecho \"What is your site name?\"read SITE_NAMEecho Site name is $SITE_NAMEWe can run our script file by typing sh main.sh. You should be in the same directory as our file and you should see the message above and the later echo message when you type your site’s name.Writing in index.html fileOnce our site is going to be an html file, we should write our html content in it. For this we’re going to use the echo and &gt; commands. Let’s write our site name variable in the html file that we create with the command: echo \"$HTML\" &gt; index.html Use a single greater-than sign &gt;, otherwise (&gt;&gt;) it won’t overwrite, but append the fileWe can see what we’ve done so far here.Creating basic html variableDynamic site’s titleWell, we’re not here to create plain text files, it’s time to start creating our HTML. Create a variable named HTML and put some basic html information in it.Here we’ll use the syntax ${VAR} inside our variable text to use our SITE_NAME that we just read through terminal and use it as our site’s name. Save it and run sh main.sh again and open our index.html file in the browser. You should some simple text only, but if you open your .html file you’ll see it’s probably written in HTML. Code for this part here.HTML=\"&lt;!DOCTYPE html&gt;&lt;html&gt;\t&lt;head&gt;\t\t&lt;title&gt;${SITE_NAME}&lt;/title&gt;\t&lt;/head&gt;\t&lt;body&gt;\t\t\t\t&lt;h1&gt;$SITE_NAME&lt;/h1&gt;\t\t\t&lt;/body&gt;&lt;/html&gt;\"echo \"$HTML\" &gt; index.html Use double quotes to our HTML variable so it will put all the line breaks and tabs correctly.Creating CSS variableWe can do the same for our CSS. Let’s read our background color, apply it to our CSS variable and use our CSS variable inside our HTML variable header/style tag. It’s just repeating the same.cho What is the background color?read BG_COLORCSS=\"body { \tbackground-color: $BG_COLOR;}\"HTML=\"&lt;!DOCTYPE html&gt;&lt;html&gt;\t&lt;head&gt;\t\t&lt;title&gt;${SITE_NAME}&lt;/title&gt;\t\t&lt;style&gt;\t\t\t${CSS}\t\t&lt;/style&gt;\t&lt;/head&gt; It’s necessary to assign our CSS variable BEFORE our HTML.Full code until this part here.Using terminal argumentsDynamic content from argumentsEverything we type after in our terminal are arguments. Our command itself is an argument, but we can make use of this by using everything after our command to catch information and use in our HTML aswell. For example:sh main.sh firstArg secondArgWe can concatenate commands too, but in this case we’ll send names as arguments so we can use in our code.In our code, we can get the arguments using the dollar sign $. Our first argument after our command will be $1, the second $2 and so on.firstName=$1secondName=$2HTML=\"&lt;!DOCTYPE html&gt;&lt;html&gt;\t&lt;body&gt;\t\t\t\t&lt;h1&gt;$firstName $secondName&lt;/h1&gt;\t\t\t&lt;/body&gt;&lt;/html&gt;\"So if you type the command sh main.sh John Ana you should see ‘John Ana’ in your browser.Iterating over argumentsNotice in the case above that we used only two arguments, but we can use as much as we want. If we don’t know how many arguments we’re getting, we should be able to loop through all arguments. We can get all arguments with the sign $* and loop through them with a for.We will then acumulate in a variable LIST with the following approach: LIST=\"${LIST} $name\" as using += doesn’t work in Bourne Shell.for name in $*do\tLIST=\"${LIST} $name\"doneHTML=\"&lt;!DOCTYPE html&gt;&lt;html&gt;\t&lt;body&gt;\t\t\t\t&lt;h1&gt;$LIST&lt;/h1&gt;\t\t\t&lt;/body&gt;&lt;/html&gt;\"Now we can send as many arguments as we want and they will be displayed and put in our HTML file. Code for this part here.Using text file content as argumentsSometimes it’s not very optimal to type every argument when you do the command, so we’ll learn to use the content in a simple .txt file. Let’s create a new file with touch list.txt and add names to it.Now we can send our names to our arguments list using the output of cat command in our text file. We’ll do this with the following command:sh main.sh $(cat list.txt)We don’t have have to do any changes into our code as the command above will just send everything as arguments and will split them by spaces and line breaks.Finishing our projectIn this simple project I wanted to have two infos for each contact: name and phone. Since if we use spaces to separate them will result in a different argument, we’ll use commas and use the command bellow to get each info. I also added some html to better structure them.for contact in $* #example: caick,(82)3298-0412do\t\tname=$(echo ${contact} | cut -d',' -f1) #will get caick\tphone=$(echo ${contact} | cut -d',' -f2) #will get (82)3298-0412\tLIST=\"${LIST}\t&lt;div class='card'&gt;\t\t&lt;h2&gt;$name&lt;/h2&gt;\t\t&lt;h3&gt;$phone&lt;/h3&gt;\t\t\t&lt;/div&gt;\"done Don’t use double quotes inside our HTML/CSS string. Remember to use single quotes for class and etc!Now we should just add styles and it’s done! We can execute our script passing arguments manually or within the text file. Examples:sh main.sh john,9828390 ana,2871289 someone,8278308sh main.sh $(cat list.txt) Some symbols as ( will result in error if sending arguments manually, but they work fine inside the text file.Full code here.See you!" } ]
